services:
  # PostgreSQL
  postgres:
    image: postgres:16.5
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 90s
    restart: unless-stopped

  # NestJS сервер
  server:
    build:
      context: .
      dockerfile: projects/server/Dockerfile.dev
    container_name: server
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: ${DATABASE_URL:-postgresql://user:password@postgres:5432/db}

      JWT_SECRET: ${JWT_SECRET}
      PORT: ${PORT:-3000}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app_network
    volumes:
      - ./projects/server:/server
      - server_node_modules:/server/node_modules
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 90s
    restart: unless-stopped

  # React клиент
  client:
    build:
      context: .
      dockerfile: projects/client/Dockerfile.dev
    container_name: client
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost/api}
    volumes:
      - ./projects/client:/client
      - client_node_modules:/client/node_modules
    ports:
      - "5173:5173"
    depends_on:
      server:
        condition: service_healthy
    networks:
      - app_network
    restart: unless-stopped

  # Nginx
  nginx:
    image: nginx:1.25.4
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./projects/nginx/nginx.dev.conf:/etc/nginx/nginx.conf:ro
      - ./projects/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      client:
        condition: service_started
      server:
        condition: service_healthy
    networks:
      - app_network
    restart: unless-stopped

volumes:
  postgres_data:
  server_node_modules:
  client_node_modules:
networks:
  app_network:
    driver: bridge
